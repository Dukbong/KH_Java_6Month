package com.jsh.study;

import java.util.LinkedList;
import java.util.Queue;

public class H_Bfs {
    public int solution(int[][] maps) {
        int answer = -1;
        int[] dx = {-1,1,0,0};
        int[] dy = {0,0,-1,1};
        
        boolean[][] vistied = new boolean[maps.length][maps[0].length]; // 방문 했는지 확인하기 위한 2차원 배열 생성
        int[][] check = new int[maps.length][maps[0].length]; // maps와 같은 걸 만들기 위한 2차원 배열 생성 
        for(int i = 0; i < check.length; i++){
            System.arraycopy(maps[i],0,check[i],0,check[0].length);
        }
        // 깊은 복사를 통해 maps의 데이터를 check에 옮긴다.
        Queue<int[]> q = new LinkedList<>(); // Queue자료구조를 만든다.
        
        q.offer(new int[]{0,0}); // Queue에 {0,0}짜리 하나 넣는다.
        vistied[0][0] = true; // 시작
        
        while(!q.isEmpty()){ // 비어있지 않다면 돌아간다.
            int[] now = q.poll(); // int[] now = {0,0}; 
            
            for(int i = 0; i < 4; i++){
                int nextX = now[0] + dx[i]; // 시작을 기준으로 x축으로 이동
                int nextY = now[1] + dy[i]; // 시작을 기준으로 y축으로 이동
                if(nextX < 0 || nextY < 0 || nextX >= maps.length || nextY >= maps[0].length){
                	// 2차원 배열에 들어가는 숫자가 음수일 수 없고 maps의 최대길이보다 클 수 없다.
                    continue; 
                }
                if(vistied[nextX][nextY] || maps[nextX][nextY] == 0){
                	// 방문 했엇거나 maps의 값이 0이면 통과하지 못하기 때문에 continue로 통과
                    continue;
                }
                // 위 조건에 모두 해당하지 않는다면 아직 방문하지 않은 새로운 길이다.
                q.offer(new int[]{nextX, nextY}); // Queue구조에 넣어준다.
                vistied[nextX][nextY] = true; // 새롭게 방문했기 때문에 true로 바꿔준다.
                check[nextX][nextY] = check[now[0]][now[1]] + 1;
                // 갈 수 있는 길은 1로 되어있기 떄문에 최종적으로 몇번만에 갔는지 확인하려면 이전 값 + 1을 계속해서 늘려간다.
            }
        }
        for(int i = 0; i < check.length; i++) {
        	for(int j = 0; j < check[i].length; j++) {
        		System.out.printf("%d\t",check[i][j]);
        	}
        	System.out.println();
        }
        if(check[maps.length - 1][maps[0].length -1] == 1){
            return answer; // 전체다 돌았지만 도착지점이 1이라면 도착할 수 없는 길이 때문에 오류의 목적으로 -1을 리턴해준다.
        }else{
            answer = check[maps.length -1][maps[0].length -1];
            return answer; // 그게 아니라면 도착지점의 값을 가져온다. (-1을 하는 이유는 length의 경우 그냥 길이를 알려주는 것이기 때문이다.)
        }
    }
}
